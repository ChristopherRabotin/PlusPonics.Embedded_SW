<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="main_8cpp" kind="file">
    <compoundname>main.cpp</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes local="yes">config/config.h</includes>
    <includes refid="GlobalReceiver_8h" local="yes">GlobalReceiver.h</includes>
    <includes refid="LogicTC_8h" local="yes">LogicTC.h</includes>
    <includes refid="TCProcessor_8h" local="yes">TCProcessor.h</includes>
    <includes local="no">pnew.cpp</includes>
    <includes refid="SerialCom_8h" local="yes">SerialCom.h</includes>
    <incdepgraph>
      <node id="230">
        <label>config/config.h</label>
      </node>
      <node id="234">
        <label>stdarg.h</label>
      </node>
      <node id="235">
        <label>WString.h</label>
      </node>
      <node id="240">
        <label>iterator</label>
      </node>
      <node id="238">
        <label>stdint.h</label>
      </node>
      <node id="232">
        <label>AbstractCommunication.h</label>
        <link refid="AbstractCommunication_8h"/>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
      </node>
      <node id="241">
        <label>map</label>
      </node>
      <node id="244">
        <label>HardwareSerial.h</label>
      </node>
      <node id="236">
        <label>TCProcessor.h</label>
        <link refid="TCProcessor_8h"/>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
      </node>
      <node id="229">
        <label>Arduino.h</label>
      </node>
      <node id="243">
        <label>SerialCom.h</label>
        <link refid="SerialCom_8h"/>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="231">
        <label>GlobalReceiver.h</label>
        <link refid="GlobalReceiver_8h"/>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>main.cpp</label>
        <link refid="main.cpp"/>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>stdio.h</label>
      </node>
      <node id="237">
        <label>AbstractTC.h</label>
        <link refid="AbstractTC_8h"/>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>pnew.cpp</label>
      </node>
      <node id="239">
        <label>LogicTC.h</label>
        <link refid="LogicTC_8h"/>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1af0d5dd593884b7553dd6cdd4deab5765" prot="public" static="no" mutable="no">
        <type><ref refid="classCommunicators_1_1SerialCom" kindref="compound">Communicators::SerialCom</ref></type>
        <definition>Communicators::SerialCom com</definition>
        <argsstring></argsstring>
        <name>com</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following definition is only to avoid the warning when writing to Flash with PROGMEM. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="20" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1afcc05c67354d89e62ca12e7708fd8d6b" prot="public" static="no" mutable="no">
        <type><ref refid="classProcessors_1_1GlobalReceiver" kindref="compound">Processors::GlobalReceiver</ref></type>
        <definition>Processors::GlobalReceiver glrcv</definition>
        <argsstring></argsstring>
        <name>glrcv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="21" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a62b66e0c89c7061ce87f6b7d61d01117" prot="public" static="no" mutable="no">
        <type><ref refid="classProcessors_1_1TCProcessor" kindref="compound">Processors::TCProcessor</ref></type>
        <definition>Processors::TCProcessor tcProcessor</definition>
        <argsstring></argsstring>
        <name>tcProcessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="22" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
<para>This function is only ran when the sketch is initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="27" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="27" bodyend="36"/>
        <references refid="classCommunicators_1_1AbstractCommunication_1af2bddffaa4a8608d5c0877fabd1386caa6e07131243800472e5c622445fef050a" compoundref="AbstractCommunication_8h" startline="52">Communicators::AbstractCommunication::INFO</references>
        <references refid="classCommunicators_1_1AbstractCommunication_1afe1798d4be09f1e7c3d5e4c0494dd397" compoundref="AbstractCommunication_8cpp" startline="23" endline="25">Communicators::AbstractCommunication::info</references>
        <references refid="classCommunicators_1_1SerialCom_1a914de6786e449c3a83f7f5764036d285" compoundref="SerialCom_8cpp" startline="17" endline="19">Communicators::SerialCom::init</references>
        <references refid="classProcessors_1_1TCProcessor_1a217096fa67d5a2bfe94aa256086545ea" compoundref="TCProcessor_8cpp" startline="14" endline="16">Processors::TCProcessor::init</references>
        <references refid="classProcessors_1_1GlobalReceiver_1aed8991f2b69c3df04c1a1c0f15fb7b3c" compoundref="GlobalReceiver_8cpp" startline="51" endline="53">Processors::GlobalReceiver::setCom</references>
        <references refid="classCommunicators_1_1AbstractCommunication_1a360781ab654fe0b0da323a9f53365643" compoundref="AbstractCommunication_8cpp" startline="63" endline="65">Communicators::AbstractCommunication::setLevel</references>
        <references refid="classProcessors_1_1GlobalReceiver_1a41eab6e4412e6bfbab06100adf8d121c" compoundref="GlobalReceiver_8cpp" startline="55" endline="57">Processors::GlobalReceiver::setTCProcessor</references>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="50" endline="61">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
<para><ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member">loop()</ref> loops while Arduino is powered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="41" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="41" bodyend="44"/>
        <references refid="classProcessors_1_1GlobalReceiver_1a0f3f336ac7a9c7d2024490961694248c" compoundref="GlobalReceiver_8cpp" startline="27" endline="49">Processors::GlobalReceiver::process</references>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="50" endline="61">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>where all the subsystems are started. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="50" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="50" bodyend="61"/>
        <references refid="classProcessors_1_1TCProcessor_1a9bd0775fa1f81266de584fb6b8a2c1a1a29c9fbbe7187c3765aaae054cc9f057a" compoundref="TCProcessor_8h" startline="37">Processors::TCProcessor::EXECUTE</references>
        <references refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" compoundref="main_8cpp" startline="41" endline="44">loop</references>
        <references refid="classProcessors_1_1TCProcessor_1abed11b68a69058b6b7f18ec394ca4542" compoundref="TCProcessor_8cpp" startline="46" endline="63">Processors::TCProcessor::perform</references>
        <references refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" compoundref="main_8cpp" startline="27" endline="36">setup</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config/config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="GlobalReceiver_8h" kindref="compound">GlobalReceiver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="LogicTC_8h" kindref="compound">LogicTC.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TCProcessor_8h" kindref="compound">TCProcessor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pnew.cpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>pnew<sp/>must<sp/>be<sp/>used<sp/>the<sp/>very<sp/>last<sp/>include.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="preprocessor">#ifdef<sp/>PROGMEM</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>PROGMEM</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PROGMEM<sp/>__attribute__((section(&quot;.progmem.data&quot;)))</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SERIAL_COMMUNICATION</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SerialCom_8h" kindref="compound">SerialCom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="main_8cpp_1af0d5dd593884b7553dd6cdd4deab5765" refkind="member"><highlight class="normal"><ref refid="classCommunicators_1_1SerialCom" kindref="compound" tooltip="This class defines serial communication with the control system.">Communicators::SerialCom</ref><sp/><ref refid="main_8cpp_1af0d5dd593884b7553dd6cdd4deab5765" kindref="member">com</ref>;</highlight></codeline>
<codeline lineno="21" refid="main_8cpp_1afcc05c67354d89e62ca12e7708fd8d6b" refkind="member"><highlight class="normal"><ref refid="classProcessors_1_1GlobalReceiver" kindref="compound" tooltip="This class is the overall handler for receiving input over whichever means of Communicators::Abstract...">Processors::GlobalReceiver</ref><sp/><ref refid="main_8cpp_1afcc05c67354d89e62ca12e7708fd8d6b" kindref="member">glrcv</ref>;</highlight></codeline>
<codeline lineno="22" refid="main_8cpp_1a62b66e0c89c7061ce87f6b7d61d01117" refkind="member"><highlight class="normal"><ref refid="classProcessors_1_1TCProcessor" kindref="compound" tooltip="This class manages all the telecommands in a std::map . It is also called by GlobalReceiver upon rece...">Processors::TCProcessor</ref><sp/><ref refid="main_8cpp_1a62b66e0c89c7061ce87f6b7d61d01117" kindref="member">tcProcessor</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member" tooltip="This function is only ran when the sketch is initialized.">setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>tcProcessor.<ref refid="classProcessors_1_1TCProcessor_1a217096fa67d5a2bfe94aa256086545ea" kindref="member" tooltip="The init function will call &amp;#39;init&amp;#39; on all the telecommands of this class. This function must be calle...">init</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>com.<ref refid="classCommunicators_1_1SerialCom_1a914de6786e449c3a83f7f5764036d285" kindref="member" tooltip="This function initializes the communication. It will be called from the setup function.">init</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>com.<ref refid="classCommunicators_1_1AbstractCommunication_1a360781ab654fe0b0da323a9f53365643" kindref="member">setLevel</ref>(<ref refid="classCommunicators_1_1AbstractCommunication_1af2bddffaa4a8608d5c0877fabd1386caa6e07131243800472e5c622445fef050a" kindref="member">Communicators::AbstractCommunication::INFO</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>com.<ref refid="classCommunicators_1_1AbstractCommunication_1afe1798d4be09f1e7c3d5e4c0494dd397" kindref="member">info</ref>(</highlight><highlight class="stringliteral">&quot;Setting<sp/>up<sp/>led&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;setup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>glrcv.<ref refid="classProcessors_1_1GlobalReceiver_1aed8991f2b69c3df04c1a1c0f15fb7b3c" kindref="member" tooltip="This function sets the communication pointer. This is used when the empty constructor is used...">setCom</ref>(com);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>glrcv.<ref refid="classProcessors_1_1GlobalReceiver_1a41eab6e4412e6bfbab06100adf8d121c" kindref="member" tooltip="This function sets the TC processor. This is used when the empty constructor is used.">setTCProcessor</ref>(tcProcessor);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member" tooltip="loop() loops while Arduino is powered.">loop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2000);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>glrcv.<ref refid="classProcessors_1_1GlobalReceiver_1a0f3f336ac7a9c7d2024490961694248c" kindref="member" tooltip="This function fetches and processes the input. It calls com&amp;#39;s recv() to read the latest information...">process</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member" tooltip="where all the subsystems are started.">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member" tooltip="This function is only ran when the sketch is initialized.">setup</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let&apos;s<sp/>turn<sp/>on<sp/>the<sp/>LED.<sp/>The<sp/>user<sp/>will<sp/>turn<sp/>it<sp/>off<sp/>from<sp/>Serial.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>tcProcessor.<ref refid="classProcessors_1_1TCProcessor_1abed11b68a69058b6b7f18ec394ca4542" kindref="member" tooltip="This function will perform the given action on the given opcode. The internal error variable will ref...">perform</ref>(<ref refid="classProcessors_1_1TCProcessor_1a9bd0775fa1f81266de584fb6b8a2c1a1a29c9fbbe7187c3765aaae054cc9f057a" kindref="member">Processors::TCProcessor::EXECUTE</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member" tooltip="loop() loops while Arduino is powered.">loop</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp"/>
  </compounddef>
</doxygen>
