<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="main_8cpp" kind="file">
    <compoundname>main.cpp</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes local="yes">config/config.h</includes>
    <includes refid="GlobalReceiver_8h" local="yes">GlobalReceiver.h</includes>
    <includes refid="LogicTC_8h" local="yes">LogicTC.h</includes>
    <includes refid="TCProcessor_8h" local="yes">TCProcessor.h</includes>
    <includes local="no">pnew.cpp</includes>
    <includes refid="SerialCom_8h" local="yes">SerialCom.h</includes>
    <incdepgraph>
      <node id="203">
        <label>config/config.h</label>
      </node>
      <node id="207">
        <label>stdarg.h</label>
      </node>
      <node id="208">
        <label>WString.h</label>
      </node>
      <node id="213">
        <label>iterator</label>
      </node>
      <node id="211">
        <label>stdint.h</label>
      </node>
      <node id="205">
        <label>AbstractCommunication.h</label>
        <link refid="AbstractCommunication_8h"/>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
      </node>
      <node id="214">
        <label>map</label>
      </node>
      <node id="210">
        <label>TC.h</label>
        <link refid="TC_8h"/>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="217">
        <label>HardwareSerial.h</label>
      </node>
      <node id="209">
        <label>TCProcessor.h</label>
        <link refid="TCProcessor_8h"/>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="213" relation="include">
        </childnode>
        <childnode refid="214" relation="include">
        </childnode>
      </node>
      <node id="202">
        <label>Arduino.h</label>
      </node>
      <node id="216">
        <label>SerialCom.h</label>
        <link refid="SerialCom_8h"/>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
      <node id="204">
        <label>GlobalReceiver.h</label>
        <link refid="GlobalReceiver_8h"/>
        <childnode refid="205" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
      </node>
      <node id="201">
        <label>main.cpp</label>
        <link refid="main.cpp"/>
        <childnode refid="202" relation="include">
        </childnode>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
      </node>
      <node id="206">
        <label>stdio.h</label>
      </node>
      <node id="215">
        <label>pnew.cpp</label>
      </node>
      <node id="212">
        <label>LogicTC.h</label>
        <link refid="LogicTC_8h"/>
        <childnode refid="210" relation="include">
        </childnode>
        <childnode refid="202" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1afdd77f1aa3023f9ba5f49bb1f6c68b51" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int ledPin</definition>
        <argsstring></argsstring>
        <name>ledPin</name>
        <initializer>= 13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following definition is only to avoid the warning when writing to Flash with PROGMEM. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="20" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ac32bb15f611faf91f75daaab60c1068c" prot="public" static="no" mutable="no">
        <type><ref refid="classSerialCom" kindref="compound">SerialCom</ref></type>
        <definition>SerialCom com</definition>
        <argsstring></argsstring>
        <name>com</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="22" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a95de02de573cd863d1547c545dfeceae" prot="public" static="no" mutable="no">
        <type><ref refid="classGlobalReceiver" kindref="compound">GlobalReceiver</ref></type>
        <definition>GlobalReceiver glrcv</definition>
        <argsstring></argsstring>
        <name>glrcv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="23" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a60ab7ee2619879f6886f309095dca225" prot="public" static="no" mutable="no">
        <type><ref refid="classTCProcessor" kindref="compound">TCProcessor</ref></type>
        <definition>TCProcessor tcProcessor</definition>
        <argsstring></argsstring>
        <name>tcProcessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="24" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
<para>This function is only ran when the sketch is initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="29" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="29" bodyend="38"/>
        <references refid="classAbstractCommunication_1a4226603ef45c35ea969f888ff6cabe4faf948f99c94172d72dff0a540a84704fb" compoundref="AbstractCommunication_8h" startline="46">AbstractCommunication::INFO</references>
        <references refid="classAbstractCommunication_1aca99e8b6cfffce4207bb9ca09f90e15c" compoundref="AbstractCommunication_8cpp" startline="23" endline="25">AbstractCommunication::info</references>
        <references refid="classSerialCom_1a53bb031287acb1973c1e1f76799c76b6" compoundref="SerialCom_8cpp" startline="17" endline="19">SerialCom::init</references>
        <references refid="classTCProcessor_1a4a8c96ae1992c22a3f1b52802a356e72" compoundref="TCProcessor_8cpp" startline="14" endline="16">TCProcessor::init</references>
        <references refid="classGlobalReceiver_1adea5c467d1cd853a6ba6ef88d5611dcd" compoundref="GlobalReceiver_8cpp" startline="51" endline="53">GlobalReceiver::setCom</references>
        <references refid="classAbstractCommunication_1a959a785338d76d315568c47dcc3a0336" compoundref="AbstractCommunication_8cpp" startline="63" endline="65">AbstractCommunication::setLevel</references>
        <references refid="classGlobalReceiver_1a11733fe91fb1e7829efa9672f569cdb5" compoundref="GlobalReceiver_8cpp" startline="55" endline="57">GlobalReceiver::setTCProcessor</references>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="52" endline="63">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
<para><ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member">loop()</ref> loops while Arduino is powered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="43" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="43" bodyend="46"/>
        <references refid="classGlobalReceiver_1a86c5c89fd69a213379582e1a81085d12" compoundref="GlobalReceiver_8cpp" startline="27" endline="49">GlobalReceiver::process</references>
        <referencedby refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" compoundref="main_8cpp" startline="52" endline="63">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>where all the subsystems are started. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" line="52" bodyfile="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp" bodystart="52" bodyend="63"/>
        <references refid="classTCProcessor_1a7129c3bda29003b5020b432bdba6cb3caef939d362d7f07ad29ea6a0c47b81e85" compoundref="TCProcessor_8h" startline="36">TCProcessor::EXECUTE</references>
        <references refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" compoundref="main_8cpp" startline="43" endline="46">loop</references>
        <references refid="classTCProcessor_1a8d82f0ba03d36e1fe16504e2835ac4ed" compoundref="TCProcessor_8cpp" startline="46" endline="63">TCProcessor::perform</references>
        <references refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" compoundref="main_8cpp" startline="29" endline="38">setup</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config/config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="GlobalReceiver_8h" kindref="compound">GlobalReceiver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="LogicTC_8h" kindref="compound">LogicTC.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="TCProcessor_8h" kindref="compound">TCProcessor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pnew.cpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>pnew<sp/>must<sp/>be<sp/>used<sp/>the<sp/>very<sp/>last<sp/>include.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="preprocessor">#ifdef<sp/>PROGMEM</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>PROGMEM</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PROGMEM<sp/>__attribute__((section(&quot;.progmem.data&quot;)))</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SERIAL_COMMUNICATION</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SerialCom_8h" kindref="compound">SerialCom.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="main_8cpp_1afdd77f1aa3023f9ba5f49bb1f6c68b51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1afdd77f1aa3023f9ba5f49bb1f6c68b51" kindref="member">ledPin</ref><sp/>=<sp/>13;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LED<sp/>connected<sp/>to<sp/>digital<sp/>pin<sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="main_8cpp_1ac32bb15f611faf91f75daaab60c1068c" refkind="member"><highlight class="normal"><ref refid="classSerialCom" kindref="compound" tooltip="This class defines serial communication with the control system.">SerialCom</ref><sp/><ref refid="main_8cpp_1ac32bb15f611faf91f75daaab60c1068c" kindref="member">com</ref>;</highlight></codeline>
<codeline lineno="23" refid="main_8cpp_1a95de02de573cd863d1547c545dfeceae" refkind="member"><highlight class="normal"><ref refid="classGlobalReceiver" kindref="compound">GlobalReceiver</ref><sp/><ref refid="main_8cpp_1a95de02de573cd863d1547c545dfeceae" kindref="member">glrcv</ref>;</highlight></codeline>
<codeline lineno="24" refid="main_8cpp_1a60ab7ee2619879f6886f309095dca225" refkind="member"><highlight class="normal"><ref refid="classTCProcessor" kindref="compound" tooltip="This class manages all the telecommands in a std::map . It is also called by GlobalReceiver upon rece...">TCProcessor</ref><sp/><ref refid="main_8cpp_1a60ab7ee2619879f6886f309095dca225" kindref="member">tcProcessor</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member" tooltip="This function is only ran when the sketch is initialized.">setup</ref>()<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>tcProcessor.<ref refid="classTCProcessor_1a4a8c96ae1992c22a3f1b52802a356e72" kindref="member" tooltip="The init function will call &amp;#39;init&amp;#39; on all the telecommands of this class. This function must be calle...">init</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>com.<ref refid="classSerialCom_1a53bb031287acb1973c1e1f76799c76b6" kindref="member" tooltip="This function initializes the communication. It will be called from the setup function.">init</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>com.<ref refid="classAbstractCommunication_1a959a785338d76d315568c47dcc3a0336" kindref="member">setLevel</ref>(<ref refid="classAbstractCommunication_1a4226603ef45c35ea969f888ff6cabe4faf948f99c94172d72dff0a540a84704fb" kindref="member">AbstractCommunication::INFO</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>com.<ref refid="classAbstractCommunication_1aca99e8b6cfffce4207bb9ca09f90e15c" kindref="member">info</ref>(</highlight><highlight class="stringliteral">&quot;Setting<sp/>up<sp/>led&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;setup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>glrcv.<ref refid="classGlobalReceiver_1adea5c467d1cd853a6ba6ef88d5611dcd" kindref="member" tooltip="This function sets the communication pointer. This is used when the empty constructor is used...">setCom</ref>(com);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>glrcv.<ref refid="classGlobalReceiver_1a11733fe91fb1e7829efa9672f569cdb5" kindref="member" tooltip="This function sets the TC processor. This is used when the empty constructor is used.">setTCProcessor</ref>(tcProcessor);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member" tooltip="loop() loops while Arduino is powered.">loop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2000);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>glrcv.<ref refid="classGlobalReceiver_1a86c5c89fd69a213379582e1a81085d12" kindref="member" tooltip="This function fetches and processes the input. It calls com&amp;#39;s recv() to read the latest information...">process</ref>();</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member" tooltip="where all the subsystems are started.">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>init();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a4fc01d736fe50cf5b977f755b675f11d" kindref="member" tooltip="This function is only ran when the sketch is initialized.">setup</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Let&apos;s<sp/>turn<sp/>on<sp/>the<sp/>LED.<sp/>The<sp/>user<sp/>will<sp/>turn<sp/>it<sp/>off<sp/>from<sp/>Serial.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>tcProcessor.<ref refid="classTCProcessor_1a8d82f0ba03d36e1fe16504e2835ac4ed" kindref="member" tooltip="This function will perform the given action on the given opcode. The internal error variable will ref...">perform</ref>(<ref refid="classTCProcessor_1a7129c3bda29003b5020b432bdba6cb3caef939d362d7f07ad29ea6a0c47b81e85" kindref="member">TCProcessor::EXECUTE</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member" tooltip="loop() loops while Arduino is powered.">loop</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/chris/Workspace/PlusPonics/code/Embedded_SW/main.cpp"/>
  </compounddef>
</doxygen>
